#! /bin/bash

set -e

# default workdir
WORKDIR=$(pwd)/ocserv-files

# default options for ocserv.conf
ocserv_conf_template=/etc/ocserv/ocserv.conf.template
ocserv_conf_port=8443
ocserv_conf_gateway=10.0.2.0/24             # default value from slirp4netns for tap0
ocserv_conf_default_domain=ocserv-server.net
ocserv_conf_rx_bytes_sec=1250000000
ocserv_conf_tx_bytes_sec=1250000000
ocserv_conf_file="\${WORKDIR}"/etc/ocserv.conf
ocserv_conf_passwd="\${WORKDIR}"/etc/ocserv.passwd
ocserv_conf_run_dir="\${WORKDIR}"/run
ocserv_conf_certs="\${WORKDIR}"/etc/certs

# Read nameservers for /etc/resolv.conf and put them in a comma separated list.
ocserv_conf_dns=$(grep nameserver /etc/resolv.conf | sed -E 's/nameserver\s+//' | sed -z -E 's/\s*$//' | sed -z 's/\n/,/g')

trap cleanup EXIT
cleanup () {
    if [[ -f "${ns_pid}" ]]
    then
        kill $(cat ${ns_pid}) && rm -f "${ns_pid}"
    fi

    if [[ -f "${slirp_pid}" ]]
    then
        kill $(cat ${slirp_pid}) && rm -f "${slirp_pid}"
    fi
}

show_help () {
    echo "$0 [options]"
    echo "where [options] are:"
    echo "  --add-user USER:PASS  Declare USER with password PASS. At least one user"
    echo "                        should be declared the first time the server is run."
    echo "  --certs CERTSDIR      Directory with server certificates. Certificates are"
    echo "                        created if missing. Default is ${ocserv_conf_certs}"
    echo "  --dns SERVER,..       Comma separated list of DNS servers to use."
    echo "                        Default is the nameserver entries in /etc/resolv.conf"
    echo "  --limit-rx LIMIT      Limit ingress traffic to server to LIMIT bytes/s."
    echo "                        Default is ${ocserv_conf_rx_bytes_sec} (10 Gbps)."
    echo "  --limit-tx LIMIT      Limit egress traffic from server to LIMIT bytes/s."
    echo "                        Default is ${ocserv_conf_tx_bytes_sec} (10 Gbps)."
    echo "                        Default is the nameserver entries in /etc/resolv.conf"
    echo "  --port PORT           Port to listen for vpn client connections."
    echo "                        Default is $ocserv_conf_port"
    echo "  --workdir WORKDIR     Directory to write support files. Created if needed."
    echo "                        Default is $WORKDIR"
}

write_conf_file () {
    # Turn comma-separated into dns=...\ndns=...
    ocserv_conf_dns=$(echo dns=${ocserv_conf_dns} | sed -E 's/,/\ndns=/g')

    template="$(cat ${ocserv_conf_template})"
    eval "echo \"${template}\"" > "${ocserv_conf_file}"
}

wait_for_file_creation()
{
    filename=$1
    timeout=${2:-5}
    counter_seconds=0

    [[ -z "$filename" ]] && exit 1

    while [[ $counter_seconds -lt $timeout ]]
    do
        [[ -e $filename ]] && return 0
        counter_seconds=$(($counter_seconds + 1))
        sleep 1
    done

    echo "$filename was not created. (timeout: $timeout s)"
    exit 1
}

# parse arguments
while [[ $# -gt 0 ]]
do
    arg="$1"
    case "${arg}" in
        --add-user)
            shift
            NEW_USER="$1"
            ;;
        --certs)
            shift
            ocserv_conf_certs="$1"
            ;;
        --dns)
            shift
            ocserv_conf_dns="$1"
            ;;
        --limit-rx)
            shift
            ocserv_conf_rx_bytes_sec="$1"
            ;;
        --limit-tx)
            shift
            ocserv_conf_tx_bytes_sec="$1"
            ;;
        --port)
            shift
            ocserv_conf_port="$1"
            ;;
        --workdir)
            shift
            WORKDIR="$1"
            ;;
        *)
            echo "Unrecognized option: $arg"
            show_help
            exit 1
            ;;
    esac
    shift
done


# If workdir is not absolute, assume relative to current directory.
if [[ "$WORKDIR" != /* ]]; then
    WORKDIR=$(pwd)/${WORKDIR}
fi
WORKDIR=$(readlink -f $WORKDIR)

if ! mkdir -p "${WORKDIR}"/{etc,run}
then
    echo "Could not create working directory: $WORKDIR"
    exit 1
fi

ns_pid="${WORKDIR}"/run/ns_pid.$$
slirp_pid="${WORKDIR}"/run/slirp_pid.$$
slirp_socket="${WORKDIR}"/run/slirp.socket.$$
ocserv_pid="${WORKDIR}"/run/ocserv.pid    # comes from ocserv.conf

# expand WORKDIR
ocserv_conf_file=$(eval echo $ocserv_conf_file)
ocserv_conf_passwd=$(eval echo $ocserv_conf_passwd)
ocserv_conf_run_dir=$(eval echo $ocserv_conf_run_dir)
ocserv_conf_certs=$(eval echo $ocserv_conf_certs)

# copy pre-defined user and passwords if available
if [[ ! -f "$ocserv_conf_passwd" ]] && [[ -f /etc/ocserv/ocserv.passwd ]]
then
   cp /etc/ocserv/ocserv.passwd "${ocserv_conf_passwd}"
fi

if [[ -n "${NEW_USER}" ]]
then
    user=${NEW_USER%%:*}
    pass=${NEW_USER##*:}

    if [[ -z "${user}" ]] || [[ -z "${pass}" ]]
    then
        echo "--add-user should be of the form USER:PASS"
        exit 1
    fi

    if echo "${pass}" | ocpasswd -c "${ocserv_conf_passwd}" "${user}"
    then
        echo "Added user: ${user}"
    else
        echo "Failed to add user: ${user}"
        exit 1
    fi
fi

# generate certificates
/usr/bin/ocserv-genkey ${ocserv_conf_certs}

write_conf_file

# Create the namespace where ocserv will run
unshare --user --map-root-user --net --mount /bin/sh <<EOF &
mount --bind /etc/ocserv/resolv.conf /etc/resolv.conf
mount --bind /etc/ocserv/hosts.allow /etc/hosts.allow
mount --bind /etc/ocserv/hosts.deny  /etc/hosts.deny

# wait for slirp4netns
sleep 5

# setup masquerading
iptables-restore < /etc/ocserv/vpn-iptables.txt
iptables -A INPUT -p tcp --dport ${ocserv_conf_port} -j ACCEPT
iptables -A INPUT -p udp --dport ${ocserv_conf_port} -j ACCEPT

#launch ocserv
export LD_PRELOAD=/usr/lib/keep_privileges.so
ocserv -f -d1 -c ${ocserv_conf_file}
EOF
echo $! > ${ns_pid}

# Create virtual network interface in the namespace (tap0)
slirp4netns --configure --mtu=65520 --disable-host-loopback $(cat ${ns_pid}) -a ${slirp_socket} tap0 &
echo $! > ${slirp_pid}

wait_for_file_creation ${slirp_socket}

# Expose port $ocserv_conf_port. $ocserv_conf_port is used for incoming vpn client connections
json_api='{"execute": "add_hostfwd", "arguments": {"proto": "tcp", "host_addr": "0.0.0.0", "host_port": '"${ocserv_conf_port}"', "guest_addr": "10.0.2.100", "guest_port": '"${ocserv_conf_port}"'}}'
echo "${json_api}" | nc -U ${slirp_socket}

wait

